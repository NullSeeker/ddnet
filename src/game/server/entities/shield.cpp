#include "shield.h"
#include "character.h"

#include <game/generated/protocol.h>
#include <game/mapitems.h>

#include <game/server/gamecontext.h>
#include <game/server/player.h>

std::vector<CShield *> CShield::s_ActiveShields;
int CShield::s_ShieldsLifeEndTick = -1;

// —Å–ø–∞–≤–Ω
CShield::CShield(CGameWorld *pGameWorld, vec2 Pos)
    : CEntity(pGameWorld, CGameWorld::ENTTYPE_PICKUP, Pos, 14)
{
    GameWorld()->InsertEntity(this);
    GameServer()->CreateSound(m_Pos, SOUND_WEAPON_SPAWN);

    for(int i = 0; i < 4; i++)
        m_LaserIDs[i] = Server()->SnapNewId();

    s_ActiveShields.push_back(this);

    if(s_ActiveShields.size() == 2)
    {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–æ–∏—Ö —â–∏—Ç–æ–≤
        s_ShieldsLifeEndTick = Server()->Tick() + Server()->TickSpeed() * 10; // 30 —Å–µ–∫
        // –û–±–Ω–æ–≤–ª—è–µ–º —É –≤—Ç–æ—Ä–æ–≥–æ —â–∏—Ç–∞ —Ç–æ–∂–µ
        for(auto pShield : s_ActiveShields)
        {
            pShield->m_LifeTimeTicks = s_ShieldsLifeEndTick;
        }
    }
    else
    {
        // –ï—Å–ª–∏ —â–∏—Ç –æ–¥–∏–Ω ‚Äî –∂–∏–≤—ë–º –≤–µ—á–Ω–æ (–∏–ª–∏ –æ—á–µ–Ω—å –¥–æ–ª–≥–æ)
        m_LifeTimeTicks = -1;
    }
}


CShield::~CShield()
{
    for(int i = 0; i < 4; i++)
        Server()->SnapFreeId(m_LaserIDs[i]);

    auto it = std::find(s_ActiveShields.begin(), s_ActiveShields.end(), this);
    if(it != s_ActiveShields.end())
        s_ActiveShields.erase(it);

    // –ï—Å–ª–∏ —â–∏—Ç–æ–≤ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ –¥–≤—É—Ö ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if(s_ActiveShields.size() < 2)
        s_ShieldsLifeEndTick = -1;

    // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω —â–∏—Ç ‚Äî –æ–Ω –∂–∏–≤—ë—Ç –≤–µ—á–Ω–æ
    if(s_ActiveShields.size() == 1)
        s_ActiveShields[0]->m_LifeTimeTicks = -1;
}

void CShield::Tick()
{
    
    // –£–¥–∞–ª—è–µ–º —â–∏—Ç –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ
    if(m_LifeTimeTicks != -1 && Server()->Tick() > m_LifeTimeTicks)
    {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —â–∏—Ç—ã —Å—Ä–∞–∑—É
        for(auto pShield : s_ActiveShields)
        {
            GameWorld()->RemoveEntity(pShield);
            delete pShield;
        }
        s_ActiveShields.clear();
        s_ShieldsLifeEndTick = -1;
        return;
    }


    // –¢–µ–ª–µ–ø–æ—Ä—Ç –∏–≥—Ä–æ–∫–æ–≤ –º–µ–∂–¥—É –¥–≤—É–º—è —â–∏—Ç–∞–º–∏
    for(int i = 0; i < MAX_CLIENTS; i++)
    {
        CPlayer *pPlayer = GameServer()->m_apPlayers[i];
        if(!pPlayer) continue;

        CCharacter *pChr = pPlayer->GetCharacter();
        if(!pChr) continue;

        if(distance(pChr->m_Pos, m_Pos) < 32.0f && pChr->CanTeleport(Server()->Tick(), Server()->TickSpeed() * 1)) // 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç
        {
            dbg_msg("shield", "Player %d teleporting", pPlayer->GetCid());
        
            for(CShield *pOtherShield : s_ActiveShields)
            {
                if(pOtherShield != this)
                {
                    pChr->m_Pos = pOtherShield->m_Pos + vec2(0, -32);
                    CCharacterCore *pCore = pChr->Core();
                    pCore->m_Pos = pChr->m_Pos;
                    pCore->m_Vel = vec2(0, 0);
                    pChr->MarkTeleported(Server()->Tick());

                    GameServer()->CreateSound(pChr->m_Pos, SOUND_PLAYER_SPAWN);
                    
                    break;
                }
            }
        }
    }
       
/*  // –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∏–º–ø—É–ª—å—Å–∞ (–∫–∞–∂–¥—ã–µ 1 —Å–µ–∫—É–Ω–¥—É)
    const int PulseInterval = Server()->TickSpeed() * 1;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –±—ã–ª –∏–º–ø—É–ª—å—Å
    static int LastPulseTick = 0;

    if(Server()->Tick() - LastPulseTick >= PulseInterval)
    {
        LastPulseTick = Server()->Tick();

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        for(int i = 0; i < MAX_CLIENTS; i++)
        {
            CPlayer *pPlayer = GameServer()->m_apPlayers[i];
            if(!pPlayer)
                continue;

            CCharacter *pChr = pPlayer->GetCharacter();
            if(!pChr)
                continue;

            vec2 dir = pChr->m_Pos - m_Pos;
            float dist = length(dir);

            // –†–∞–¥–∏—É—Å –¥–µ–π—Å—Ç–≤–∏—è –∏–º–ø—É–ª—å—Å–∞
            const float Radius = 128.0f;

            if(dist < Radius && dist > 0.01f)
            {
                vec2 forceDir = normalize(dir);

                // –°–∏–ª–∞ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
                float strength = (Radius - dist) * 0.5f;

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–º–ø—É–ª—å—Å –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
                pChr->AddVelocity(forceDir * strength);
            }
        }

        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç—É—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏ –∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–≤–∞—Ç—å –≤–∑—Ä—ã–≤ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–∞—Å—Ç–∏—Ü –≤–æ–∫—Ä—É–≥ —â–∏—Ç–∞
    } */
}



// –æ—Ç—Ä–∏—Å–æ–≤–∫–∞

void CShield::Snap(int SnappingClient)
{
    if(!Server() || NetworkClipped(SnappingClient))
        return;

    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è ‚Äî –∫–∞–∫ –æ–±—ã—á–Ω–æ
    CNetObj_Pickup *pPickup = static_cast<CNetObj_Pickup *>(Server()->SnapNewItem(NETOBJTYPE_PICKUP, GetId(), sizeof(CNetObj_Pickup)));
    if(!pPickup)
        return;

    pPickup->m_X = round_to_int(m_Pos.x);
    pPickup->m_Y = round_to_int(m_Pos.y);
    pPickup->m_Type = POWERUP_NINJA;

    // üî≤ –ö–≤–∞–¥—Ä–∞—Ç –∏–∑ –ª–∞–∑–µ—Ä–æ–≤
    vec2 p1 = m_Pos + vec2(-32, -32);
    vec2 p2 = m_Pos + vec2( 32, -32);
    vec2 p3 = m_Pos + vec2( 32,  32);
    vec2 p4 = m_Pos + vec2(-32,  32);

    // –ö–∞–∂–¥–æ–º—É –ª–∞–∑–µ—Ä—É –Ω—É–∂–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID

    // –õ–∞–∑–µ—Ä 1: p1 -> p2
    if(CNetObj_Laser *pLaser = static_cast<CNetObj_Laser *>(Server()->SnapNewItem(NETOBJTYPE_LASER, m_LaserIDs[0], sizeof(CNetObj_Laser))))
    {
        pLaser->m_X = (int)p2.x;
        pLaser->m_Y = (int)p2.y;
        pLaser->m_FromX = (int)p1.x;
        pLaser->m_FromY = (int)p1.y;
        pLaser->m_StartTick = Server()->Tick();
    }

    // –õ–∞–∑–µ—Ä 2: p2 -> p3
    if(CNetObj_Laser *pLaser = static_cast<CNetObj_Laser *>(Server()->SnapNewItem(NETOBJTYPE_LASER, m_LaserIDs[1], sizeof(CNetObj_Laser))))
    {
        pLaser->m_X = (int)p3.x;
        pLaser->m_Y = (int)p3.y;
        pLaser->m_FromX = (int)p2.x;
        pLaser->m_FromY = (int)p2.y;
        pLaser->m_StartTick = Server()->Tick();
    }

    // –õ–∞–∑–µ—Ä 3: p3 -> p4
    if(CNetObj_Laser *pLaser = static_cast<CNetObj_Laser *>(Server()->SnapNewItem(NETOBJTYPE_LASER, m_LaserIDs[2], sizeof(CNetObj_Laser))))
    {
        pLaser->m_X = (int)p4.x;
        pLaser->m_Y = (int)p4.y;
        pLaser->m_FromX = (int)p3.x;
        pLaser->m_FromY = (int)p3.y;
        pLaser->m_StartTick = Server()->Tick();
    }

    // –õ–∞–∑–µ—Ä 4: p4 -> p1
    if(CNetObj_Laser *pLaser = static_cast<CNetObj_Laser *>(Server()->SnapNewItem(NETOBJTYPE_LASER, m_LaserIDs[3], sizeof(CNetObj_Laser))))
    {
        pLaser->m_X = (int)p1.x;
        pLaser->m_Y = (int)p1.y;
        pLaser->m_FromX = (int)p4.x;
        pLaser->m_FromY = (int)p4.y;
        pLaser->m_StartTick = Server()->Tick();
    }

    for(int i = 0; i < 4; i++)
    {
        float Angle = 2.0f * pi * i / 4.0f + (Server()->Tick() % 360) * pi / 180.0f;
        vec2 Offset = vec2(cosf(Angle), sinf(Angle)) * 28.0f;
        vec2 ParticlePos = m_Pos + Offset;
        vec2 Velocity = vec2(cosf(Angle + pi / 2.0f), sinf(Angle + pi / 2.0f)) * 0.01f;
    
        CNetObj_Projectile *pProj = static_cast<CNetObj_Projectile *>(
            Server()->SnapNewItem(NETOBJTYPE_PROJECTILE, Server()->SnapNewId(), sizeof(CNetObj_Projectile))
        );
    
        if(pProj)
        {
            pProj->m_X = (int)(ParticlePos.x);
            pProj->m_Y = (int)(ParticlePos.y);
            pProj->m_VelX = (int)(Velocity.x * 100.0f); // –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
            pProj->m_VelY = (int)(Velocity.y * 100.0f);
            pProj->m_Type = WEAPON_SHOTGUN; // –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ WEAPON_SHOTGUN, NINJA –∏ —Ç.–¥.
            pProj->m_StartTick = Server()->Tick();
        }
    }
    if(Server()->Tick() % (Server()->TickSpeed() * 1) == 0)
    {
        CNetEvent_Explosion *pExplosion = static_cast<CNetEvent_Explosion *>(Server()->SnapNewItem(NETEVENTTYPE_EXPLOSION, GetId(), sizeof(CNetEvent_Explosion)));
        if(pExplosion)
        {
            pExplosion->m_X = (int)m_Pos.x;
            pExplosion->m_Y = (int)m_Pos.y;
        }
    }
}